import { c as create_ssr_component, f as createEventDispatcher, e as escape, b as add_attribute, a as subscribe, v as validate_component, d as each } from "../../../../chunks/ssr.js";
import "../../../../chunks/firebase.js";
import { t } from "../../../../chunks/i18n.js";
import { N as Nav } from "../../../../chunks/Nav.js";
const css$1 = {
  code: ".modal-overlay.svelte-1n6uj9{background-color:rgba(0,0,0,.5)}",
  map: `{"version":3,"file":"NegotiationModal.svelte","sources":["NegotiationModal.svelte"],"sourcesContent":["<!-- src/lib/components/NegotiationModal.svelte -->\\n<script>\\n    import { createEventDispatcher } from 'svelte';\\n\\n    export let product = {}; // Passed product details\\n    export let showModal = false; // Control visibility of the modal\\n\\n    let negotiationPrice = ''; // Store the negotiation price input\\n\\n    const dispatch = createEventDispatcher();\\n\\n    // Function to handle negotiation\\n    function handleNegotiate() {\\n        if (negotiationPrice) {\\n            const negotiatedProduct = {\\n                ...product,\\n                negotiationPrice\\n            };\\n            dispatch('negotiate', negotiatedProduct); // Dispatch an event with negotiated product data\\n            negotiationPrice = ''; // Clear the input field\\n            showModal = false; // Close the modal\\n        }\\n    }\\n\\n    // Function to close the modal\\n    function closeModal() {\\n        showModal = false;\\n    }\\n<\/script>\\n\\n{#if showModal}\\n<div class=\\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50\\">\\n    <div class=\\"bg-white rounded-lg shadow-lg p-5 w-11/12 md:w-1/3 modal-overlay\\">\\n        <h2 class=\\"text-xl font-semibold mb-4 text-white text-opacity-[50%]\\">Negotiate Price for {product.name}</h2>\\n        <input \\n            type=\\"number\\" \\n            placeholder=\\"Enter your price\\" \\n            bind:value={negotiationPrice} \\n            class=\\"p-2 w-full border rounded-md mb-4\\"\\n        />\\n        <div class=\\"flex justify-end\\">\\n            <button class=\\"bg-gray-300 px-4 py-2 mr-2 rounded-md\\" on:click={closeModal}>Cancel</button>\\n            <button class=\\"bg-green-500 text-white px-4 py-2 rounded-md\\" on:click={handleNegotiate}>Negotiate</button>\\n        </div>\\n    </div>\\n</div>\\n{/if}\\n\\n<style>.modal-overlay{background-color:rgba(0,0,0,.5)}</style>\\n"],"names":[],"mappings":"AAgDO,4BAAc,CAAC,iBAAiB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC"}`
};
const NegotiationModal = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { product = {} } = $$props;
  let { showModal = false } = $$props;
  let negotiationPrice = "";
  createEventDispatcher();
  if ($$props.product === void 0 && $$bindings.product && product !== void 0) $$bindings.product(product);
  if ($$props.showModal === void 0 && $$bindings.showModal && showModal !== void 0) $$bindings.showModal(showModal);
  $$result.css.add(css$1);
  return `  ${showModal ? `<div class="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50"><div class="bg-white rounded-lg shadow-lg p-5 w-11/12 md:w-1/3 modal-overlay svelte-1n6uj9"><h2 class="text-xl font-semibold mb-4 text-white text-opacity-[50%]">Negotiate Price for ${escape(product.name)}</h2> <input type="number" placeholder="Enter your price" class="p-2 w-full border rounded-md mb-4"${add_attribute("value", negotiationPrice, 0)}> <div class="flex justify-end"><button class="bg-gray-300 px-4 py-2 mr-2 rounded-md" data-svelte-h="svelte-hci8xb">Cancel</button> <button class="bg-green-500 text-white px-4 py-2 rounded-md" data-svelte-h="svelte-1q3p9o1">Negotiate</button></div></div></div>` : ``}`;
});
const css = {
  code: ".loader.svelte-sg8bjj{animation:svelte-sg8bjj-spin 1s linear infinite;border:4px solid rgba(0,0,0,.1);border-radius:50%;border-top-color:#3498db;height:40px;margin:0 auto;width:40px}@keyframes svelte-sg8bjj-spin{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n    import { onMount } from 'svelte';\\n    import { fetchProducts } from '$lib/actions/firebase.js';\\n    import { t } from '$lib/i18n';\\n    import Button from '$lib/component/landing/components/Button.svelte';\\n    import Nav from '$lib/component/landing/Nav.svelte';\\n    import NegotiationModal from '$lib/component/NegotiationModal.svelte'; // Import the NegotiationModal component\\n\\n    let products = [];\\n    let isLoading = true;\\n    let searchQuery = ''; // Search query binding\\n    let selectedProductType = ''; // To store selected product type from dropdown\\n    let filteredProducts = []; // To hold filtered products\\n    let showModal = false; // Modal visibility\\n    let currentProduct = {}; // Product currently being negotiated\\n    let negotiatedProducts = []; // Store negotiated products\\n\\n    // Fetch products from Firebase on component mount\\n    onMount(() => {\\n        fetchProducts((fetchedProducts) => {\\n            products = fetchedProducts;\\n            isLoading = false; // Stop loading when data is fetched\\n            filterProducts(); // Initial filtering\\n            console.log('Fetched products:', products);\\n        });\\n    });\\n\\n    // Reactive statement to filter products based on searchQuery and selectedProductType\\n    $: filterProducts = () => {\\n        filteredProducts = products.filter(product => {\\n            const matchesSearchQuery = product.name.toLowerCase().includes(searchQuery.toLowerCase());\\n            const matchesSelectedType = selectedProductType ? product.name.toLowerCase() === selectedProductType.toLowerCase() : true;\\n            return matchesSearchQuery && matchesSelectedType;\\n        });\\n    };\\n\\n    // Function to open negotiation modal for a specific product\\n    function openNegotiationModal(product) {\\n        currentProduct = product;\\n        showModal = true;\\n    }\\n\\n    // Function to handle negotiated product\\n    function handleNegotiatedProduct(event) {\\n        negotiatedProducts = [...negotiatedProducts, event.detail];\\n    }\\n<\/script>\\n\\n<div class=\\"container mx-auto py-10 bg-gradient-to-r from-indigo-500 to-blue-500\\">\\n    <Nav/>\\n    <br><br><br><br>\\n    <h1 class=\\"text-3xl font-bold text-center mb-5 text-white\\">{$t(\\"itl\\")}</h1>\\n    \\n    <!-- Search Input -->\\n    <div class=\\"text-center mb-5\\">\\n        <input \\n            type=\\"text\\" \\n            placeholder=\\"Search for products...\\" \\n            bind:value={searchQuery}\\n            class=\\"p-2 rounded-lg border border-gray-300 w-2/3 md:w-1/3\\"\\n            on:input={filterProducts}\\n        />\\n    </div>\\n\\n    <!-- Select Dropdown for Product Types -->\\n    <div class=\\"text-center mb-5\\">\\n        <select \\n            bind:value={selectedProductType} \\n            class=\\"p-2 rounded-lg border border-gray-300 w-2/3 md:w-1/3\\"\\n            on:change={filterProducts}\\n        >\\n            <option value=\\"\\">All Products</option>\\n            <option value=\\"apples\\">Apples</option>\\n            <option value=\\"mangos\\">Mangos</option>\\n            <option value=\\"green grapes\\">Green Grapes</option>\\n            <option value=\\"dark grapes\\">Dark Grape</option>\\n            <option value=\\"water melon\\">Watermelon</option>\\n        </select>\\n    </div>\\n\\n    {#if isLoading}\\n        <div class=\\"text-center py-20\\">\\n            <div class=\\"loader\\">Loading...</div>\\n        </div>\\n    {:else}\\n        <div class=\\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6\\">\\n            {#if filteredProducts.length}\\n                {#each filteredProducts as product}\\n                    <div class=\\"bg-white shadow-md rounded-lg overflow-hidden p-2\\">\\n                        <img src={product.imageUrl || 'placeholder-image-url.jpg'} alt={product.name} class=\\"w-full h-60 object-cover\\">\\n                        <div class=\\"p-4\\">\\n                            <h2 class=\\"text-lg font-semibold\\">{product.name}</h2>\\n                            <p class=\\"text-gray-500\\">Price: â‚¹{product.price}</p>\\n                            <p class=\\"text-gray-500\\">{product.kg} Kg</p>\\n                            <p class=\\"text-gray-400 text-sm\\">ID: {product.id}</p>\\n                            <p class=\\"text-gray-400 text-sm\\">Date: {product.date}</p>\\n                            <div class=\\"text-gray-400 text-sm\\">\\n                                Rating: \\n                                <span class=\\"star-rating\\">\\n                                    <!-- Rating Stars -->\\n                                    {#each Array(5) as _, i}\\n                                        <i class={\\n                                            i + 1 <= product.rating ? 'fas fa-star text-yellow-500' : \\n                                            (i + 0.5 < product.rating ? 'fas fa-star-half-alt text-yellow-500' : \\n                                            'far fa-star text-yellow-500')\\n                                        }></i>\\n                                    {/each}\\n                                </span> {product.rating}\\n                            </div>\\n                            <button  on:click={() => openNegotiationModal(product)}><Button green>Buy</Button></button>\\n                        </div>\\n                    </div>\\n                {/each}\\n            {:else}\\n                <p class=\\"text-center text-gray-500\\">No products found.</p>\\n            {/if}\\n        </div>\\n    {/if}\\n\\n    <!-- Negotiation Modal Component -->\\n    <NegotiationModal\\n        bind:showModal={showModal}\\n        product={currentProduct}\\n        on:negotiate={handleNegotiatedProduct}\\n    />\\n\\n    <!-- List of Negotiated Products -->\\n    {#if negotiatedProducts.length}\\n        <div class=\\"bg-white shadow-md rounded-lg mt-10 p-5\\">\\n            <h2 class=\\"text-xl font-semibold mb-4\\">Negotiated Products</h2>\\n            <ul>\\n                {#each negotiatedProducts as product}\\n                    <li class=\\"mb-2\\">\\n                        {product.name} - Original Price: â‚¹{product.price}, Negotiated Price: â‚¹{product.negotiationPrice}\\n                    </li>\\n                {/each}\\n            </ul>\\n        </div>\\n    {/if}\\n</div>\\n\\n<style>.loader{animation:spin 1s linear infinite;border:4px solid rgba(0,0,0,.1);border-radius:50%;border-top-color:#3498db;height:40px;margin:0 auto;width:40px}@keyframes spin{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}</style>\\n"],"names":[],"mappings":"AA6IO,qBAAO,CAAC,UAAU,kBAAI,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,cAAc,GAAG,CAAC,iBAAiB,OAAO,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,WAAW,kBAAI,CAAC,EAAE,CAAC,UAAU,OAAO,IAAI,CAAC,CAAC,EAAE,CAAC,UAAU,OAAO,KAAK,CAAC,CAAC"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $t, $$unsubscribe_t;
  $$unsubscribe_t = subscribe(t, (value) => $t = value);
  let searchQuery = "";
  let showModal = false;
  let currentProduct = {};
  let negotiatedProducts = [];
  $$result.css.add(css);
  let $$settled;
  let $$rendered;
  let previous_head = $$result.head;
  do {
    $$settled = true;
    $$result.head = previous_head;
    $$rendered = `<div class="container mx-auto py-10 bg-gradient-to-r from-indigo-500 to-blue-500">${validate_component(Nav, "Nav").$$render($$result, {}, {}, {})} <br><br><br><br> <h1 class="text-3xl font-bold text-center mb-5 text-white">${escape($t("itl"))}</h1>  <div class="text-center mb-5"><input type="text" placeholder="Search for products..." class="p-2 rounded-lg border border-gray-300 w-2/3 md:w-1/3"${add_attribute("value", searchQuery, 0)}></div>  <div class="text-center mb-5"><select class="p-2 rounded-lg border border-gray-300 w-2/3 md:w-1/3"><option value="" data-svelte-h="svelte-18kixnx">All Products</option><option value="apples" data-svelte-h="svelte-stvu7e">Apples</option><option value="mangos" data-svelte-h="svelte-neeac2">Mangos</option><option value="green grapes" data-svelte-h="svelte-1a3hiiu">Green Grapes</option><option value="dark grapes" data-svelte-h="svelte-87hsz7">Dark Grape</option><option value="water melon" data-svelte-h="svelte-16zjzru">Watermelon</option></select></div> ${`<div class="text-center py-20" data-svelte-h="svelte-aoxmif"><div class="loader svelte-sg8bjj">Loading...</div></div>`}  ${validate_component(NegotiationModal, "NegotiationModal").$$render(
      $$result,
      { product: currentProduct, showModal },
      {
        showModal: ($$value) => {
          showModal = $$value;
          $$settled = false;
        }
      },
      {}
    )}  ${negotiatedProducts.length ? `<div class="bg-white shadow-md rounded-lg mt-10 p-5"><h2 class="text-xl font-semibold mb-4" data-svelte-h="svelte-1m0ra1s">Negotiated Products</h2> <ul>${each(negotiatedProducts, (product) => {
      return `<li class="mb-2">${escape(product.name)} - Original Price: â‚¹${escape(product.price)}, Negotiated Price: â‚¹${escape(product.negotiationPrice)} </li>`;
    })}</ul></div>` : ``} </div>`;
  } while (!$$settled);
  $$unsubscribe_t();
  return $$rendered;
});
export {
  Page as default
};
